{"version":3,"file":"static/js/521.146f3b0e.chunk.js","mappings":"+QAMMA,EACJ,uIA6DF,EA3Da,WACX,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAaC,EAAAA,EAAAA,KAAbD,SAmBR,OAjBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,sGAEJ,mCAFI,SAGIC,MAAM,sCAAD,OACYT,EADZ,4BADb,qCAFI,cAGbU,EAHa,gBAMAA,EAASC,OANT,OAMbC,EANa,OAOnBR,EAAQQ,EAAKT,MAPM,kDASnBU,QAAQC,MAAM,6BAAd,MATmB,0DAAH,qDAapBN,GACD,GAAE,CAACR,KAGF,iBAAKe,UAAS,yBAAoBV,EAAW,YAAc,IAA3D,WACE,kCACA,gBAAIU,UAAU,YAAd,UACGZ,EAAKa,KAAI,SAAAC,GAAK,OACb,gBAAIF,UAAU,YAAd,WACE,gBACEA,UAAU,cACVG,IACED,EAAME,aAAN,UAnCO,mCAmCP,OACwBF,EAAME,cAC1BpB,EAENqB,IAAKH,EAAMI,QAEb,cAAGN,UAAU,aAAb,SAA2BE,EAAMI,SAVJJ,EAAMK,GADxB,KAebnB,EAAKoB,SACL,gBAAIR,UAAU,YAAd,WACE,gBACEG,IAAKnB,EACLqB,IAAI,YACJL,UAAU,iBAEZ,cAAGA,UAAU,aAAb,8BAIN,SAAC,KAAD,CAAMS,GAAE,kBAAaxB,GAAWe,UAAU,MAA1C,qCAKL,C","sources":["components/Cast/Cast.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport '../Cast/Cast.css';\nimport { useDarkMode } from '../Utils/DarkMode';\n\nconst IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w200'; // Base URL for actor images\nconst notFoundImageUrl =\n  'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSCMq4cGfAmaJAYVpXFPLY57EzVip1FTMK-ETQH1aU24VD-bYx5wJ4srHFP99zAgqXBvfQ&usqp=CAU';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const { darkMode } = useDarkMode();\n\n  useEffect(() => {\n    const fetchMovieCast = async () => {\n      try {\n        const apiKey = '9a72da818298f390a1dbda79726b9d32'; // Klucz API themoviedb.org\n        const response = await fetch(\n          `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${apiKey}`\n        );\n        const data = await response.json();\n        setCast(data.cast);\n      } catch (error) {\n        console.error('Error while fetching data:', error);\n      }\n    };\n\n    fetchMovieCast();\n  }, [movieId]);\n\n  return (\n    <div className={`cast-container ${darkMode ? 'dark-mode' : ''}`}>\n      <h2>Cast</h2>\n      <ul className=\"cast-list\">\n        {cast.map(actor => (\n          <li className=\"cast-item\" key={actor.id}>\n            <img\n              className=\"actor-image\"\n              src={\n                actor.profile_path\n                  ? `${IMAGE_BASE_URL}${actor.profile_path}`\n                  : notFoundImageUrl // UÅ¼yj obrazu \"Not Found\" w przypadku braku obrazu profilowego\n              }\n              alt={actor.name}\n            />\n            <p className=\"actor-name\">{actor.name}</p>\n          </li>\n        ))}\n\n        {!cast.length && (\n          <li className=\"cast-item\">\n            <img\n              src={notFoundImageUrl}\n              alt=\"Not Found\"\n              className=\"actor-image\"\n            />\n            <p className=\"actor-name\">Not Found</p>\n          </li>\n        )}\n      </ul>\n      <Link to={`/movies/${movieId}`} className=\"btn\">\n        Back to Movie Details\n      </Link>\n    </div>\n  );\n};\n\nexport default Cast;\n"],"names":["notFoundImageUrl","movieId","useParams","useState","cast","setCast","darkMode","useDarkMode","useEffect","fetchMovieCast","fetch","response","json","data","console","error","className","map","actor","src","profile_path","alt","name","id","length","to"],"sourceRoot":""}