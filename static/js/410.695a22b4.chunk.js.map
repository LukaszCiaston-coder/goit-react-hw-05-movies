{"version":3,"file":"static/js/410.695a22b4.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Loader/Loader.module.css?d03f","components/Loader/Loader.jsx","components/Movies/Movies.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loaderContainer\":\"Loader_loaderContainer__UDDYf\",\"loader\":\"Loader_loader__+lRPl\",\"spin\":\"Loader_spin__E4RJ0\"};","import styles from './Loader.module.css';\n\nconst Loader = () => {\n  return (\n    <div className={styles.loaderContainer}>\n      <div className={styles.loader}></div>\n    </div>\n  );\n};\n\nexport default Loader;\n","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport ReactPaginate from 'react-paginate';\nimport '../Movies/Movies.css';\nimport { useDarkMode } from '../Utils/DarkMode';\nimport Loader from '../Loader/Loader';\n\nconst notFoundImageUrl =\n  'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSCMq4cGfAmaJAYVpXFPLY57EzVip1FTMK-ETQH1aU24VD-bYx5wJ4srHFP99zAgqXBvfQ&usqp=CAU';\n\nconst Movies = () => {\n  const [searchKeyword, setSearchKeyword] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [genres, setGenres] = useState([]);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const resultsPerPage = 18;\n  const { darkMode } = useDarkMode();\n\n  useEffect(() => {\n    const fetchGenres = async () => {\n      try {\n        const apiKey = '9a72da818298f390a1dbda79726b9d32';\n        const response = await fetch(\n          `https://api.themoviedb.org/3/genre/movie/list?api_key=${apiKey}`\n        );\n        const data = await response.json();\n        setGenres(data.genres);\n      } catch (error) {\n        console.error('Error while fetching genres:', error);\n      }\n    };\n\n    fetchGenres();\n  }, []);\n\n  const handleSearchInputChange = event => {\n    setSearchKeyword(event.target.value);\n  };\n\n  const fetchAllResults = async () => {\n    setIsLoading(true);\n\n    const apiKey = '9a72da818298f390a1dbda79726b9d32';\n    const totalResults = 500;\n    const totalPages = Math.ceil(totalResults / resultsPerPage);\n    const allResults = [];\n\n    for (let page = 1; page <= totalPages; page++) {\n      const response = await fetch(\n        `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${searchKeyword}&page=${page}&per_page=${resultsPerPage}`\n      );\n\n      const data = await response.json();\n      const resultsWithImages = data.results || [];\n\n      allResults.push(...resultsWithImages);\n    }\n\n    setSearchResults(allResults);\n    setIsLoading(false);\n  };\n\n  const handleSearch = async e => {\n    e.preventDefault();\n    console.log('Handling search...');\n    await fetchAllResults();\n  };\n\n  const truncateTitle = (title, maxLength) => {\n    if (title.length > maxLength) {\n      return title.slice(0, maxLength) + '...';\n    }\n    return title;\n  };\n\n  const handleGenreClick = async genreId => {\n    try {\n      const apiKey = '9a72da818298f390a1dbda79726b9d32';\n      const totalResults = 500;\n      const totalPages = Math.ceil(totalResults / resultsPerPage);\n      const allResults = [];\n\n      for (let page = 1; page <= totalPages; page++) {\n        const response = await fetch(\n          `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&with_genres=${genreId}&page=${page}&per_page=${resultsPerPage}`\n        );\n        const data = await response.json();\n        const resultsWithImages = data.results || [];\n        allResults.push(...resultsWithImages);\n      }\n\n      console.log('Fetched data for genreId:', genreId);\n\n      setSearchResults(allResults);\n    } catch (error) {\n      console.error('Error while fetching data:', error);\n    }\n  };\n\n  const indexOfLastResult = (currentPage + 1) * resultsPerPage;\n  const indexOfFirstResult = currentPage * resultsPerPage;\n  const currentResults = searchResults.slice(\n    indexOfFirstResult,\n    indexOfLastResult\n  );\n\n  console.log('Rendering Movies component...', isLoading, currentResults);\n\n  return (\n    <div className={`movies-container ${darkMode ? 'dark-mode' : ''}`}>\n      <h2>Search Your Movie</h2>\n      <input\n        type=\"text\"\n        placeholder=\"Enter movie title\"\n        value={searchKeyword}\n        onChange={handleSearchInputChange}\n      />\n      <button className=\"btn\" onClick={handleSearch}>\n        Search\n      </button>\n\n      <div className=\"genre-buttons\">\n        {genres.map(genre => (\n          <button\n            key={genre.id}\n            onClick={() => handleGenreClick(genre.id)}\n            className=\"genre-button btn\"\n          >\n            {genre.name}\n          </button>\n        ))}\n      </div>\n\n      {isLoading && <Loader />}\n\n      <ul className=\"movies-list\">\n        {currentResults.map(movie => (\n          <li key={movie.id}>\n            <Link className=\"movie-items\" to={`/movies/${movie.id}`}>\n              {movie.poster_path ? (\n                <img\n                  src={`https://image.tmdb.org/t/p/w200${movie.poster_path}`}\n                  alt={movie.title}\n                  className=\"movie-thumbnail\"\n                />\n              ) : (\n                <img\n                  src={notFoundImageUrl}\n                  alt=\"Not Found\"\n                  className=\"movie-thumbnail\"\n                />\n              )}\n              <span className=\"movies-title\">\n                {truncateTitle(movie.title, 12)}\n              </span>\n            </Link>\n          </li>\n        ))}\n      </ul>\n\n      {window.innerWidth > 760 && (\n        <ReactPaginate\n          pageCount={Math.ceil(searchResults.length / resultsPerPage)}\n          pageRangeDisplayed={3}\n          marginPagesDisplayed={1}\n          onPageChange={data => setCurrentPage(data.selected)}\n          containerClassName={'pagination'}\n          subContainerClassName={'pages pagination'}\n          activeClassName={'active'}\n        />\n      )}\n\n      {window.innerWidth <= 760 && (\n        <ReactPaginate\n          pageCount={Math.ceil(searchResults.length / resultsPerPage)}\n          pageRangeDisplayed={0}\n          marginPagesDisplayed={1}\n          onPageChange={data => setCurrentPage(data.selected)}\n          containerClassName={'pagination'}\n          subContainerClassName={'pages pagination'}\n          activeClassName={'active'}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["className","styles","useState","searchKeyword","setSearchKeyword","searchResults","setSearchResults","genres","setGenres","currentPage","setCurrentPage","isLoading","setIsLoading","resultsPerPage","darkMode","useDarkMode","useEffect","fetchGenres","fetch","response","json","data","console","error","fetchAllResults","apiKey","totalPages","Math","ceil","totalResults","allResults","page","resultsWithImages","results","push","handleSearch","e","preventDefault","log","handleGenreClick","genreId","indexOfLastResult","indexOfFirstResult","currentResults","slice","type","placeholder","value","onChange","event","target","onClick","map","genre","id","name","Loader","movie","to","poster_path","src","alt","title","maxLength","length","window","innerWidth","pageCount","pageRangeDisplayed","marginPagesDisplayed","onPageChange","selected","containerClassName","subContainerClassName","activeClassName"],"sourceRoot":""}