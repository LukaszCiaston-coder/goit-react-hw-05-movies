{"version":3,"file":"static/js/410.cecbae1f.chunk.js","mappings":"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","sources":["components/Movies/Movies.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport '../Movies/Movies.css';\nimport { useDarkMode } from '../Utils/DarkMode';\n\nconst notFoundImageUrl =\n  'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSCMq4cGfAmaJAYVpXFPLY57EzVip1FTMK-ETQH1aU24VD-bYx5wJ4srHFP99zAgqXBvfQ&usqp=CAU';\n\nconst Movies = () => {\n  const [searchKeyword, setSearchKeyword] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [genres, setGenres] = useState([]);\n  const { darkMode } = useDarkMode();\n\n  useEffect(() => {\n    // Pobierz listę dostępnych gatunków z API\n    const fetchGenres = async () => {\n      try {\n        const apiKey = '9a72da818298f390a1dbda79726b9d32';\n        const response = await fetch(\n          `https://api.themoviedb.org/3/genre/movie/list?api_key=${apiKey}`\n        );\n        const data = await response.json();\n        setGenres(data.genres);\n      } catch (error) {\n        console.error('Error while fetching genres:', error);\n      }\n    };\n\n    fetchGenres();\n  }, []);\n\n  const handleSearchInputChange = event => {\n    setSearchKeyword(event.target.value);\n  };\n\n  const handleSearch = async () => {\n    try {\n      const apiKey = '9a72da818298f390a1dbda79726b9d32';\n      const response = await fetch(\n        `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${searchKeyword}`\n      );\n      const data = await response.json();\n      console.log('Fetched data:', data);\n\n      const resultsWithImages =\n        data.results.length > 0\n          ? data.results\n          : [\n              {\n                poster_path: null,\n                title: 'Not Found',\n                id: 'not-found',\n              },\n            ];\n\n      setSearchResults(resultsWithImages);\n    } catch (error) {\n      console.error('Error while fetching data:', error);\n    }\n  };\n\n  const truncateTitle = (title, maxLength) => {\n    if (title.length > maxLength) {\n      return title.slice(0, maxLength) + '...';\n    }\n    return title;\n  };\n\n  const handleGenreClick = async genreId => {\n    try {\n      const apiKey = '9a72da818298f390a1dbda79726b9d32';\n      const response = await fetch(\n        `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&with_genres=${genreId}`\n      );\n      const data = await response.json();\n\n      const resultsWithImages =\n        data.results.length > 0\n          ? data.results\n          : [\n              {\n                poster_path: null,\n                title: 'Not Found',\n                id: 'not-found',\n              },\n            ];\n\n      setSearchResults(resultsWithImages);\n    } catch (error) {\n      console.error('Error while fetching data:', error);\n    }\n  };\n\n  return (\n    <div className={`movies-container ${darkMode ? 'dark-mode' : ''}`}>\n      <h2>Search Your Movie</h2>\n      <input\n        type=\"text\"\n        placeholder=\"Enter movie title\"\n        value={searchKeyword}\n        onChange={handleSearchInputChange}\n      />\n      <button onClick={handleSearch}>Search</button>\n\n      {/* Przyciski gatunków */}\n      <div className=\"genre-buttons\">\n        {genres.map(genre => (\n          <button\n            key={genre.id}\n            onClick={() => handleGenreClick(genre.id)}\n            className=\"genre-button\"\n          >\n            {genre.name}\n          </button>\n        ))}\n      </div>\n\n      <ul className=\"movies-list\">\n        {searchResults.map(movie => (\n          <li key={movie.id}>\n            <Link className=\"movie-items\" to={`/movies/${movie.id}`}>\n              {movie.poster_path ? (\n                <img\n                  src={`https://image.tmdb.org/t/p/w200${movie.poster_path}`}\n                  alt={movie.title}\n                  className=\"movie-thumbnail\"\n                />\n              ) : (\n                <img\n                  src={notFoundImageUrl}\n                  alt=\"Not Found\"\n                  className=\"movie-thumbnail\"\n                />\n              )}\n              <span className=\"movies-title\">\n                {truncateTitle(movie.title, 12)}\n              </span>\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Movies;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["useState","searchKeyword","setSearchKeyword","searchResults","setSearchResults","genres","setGenres","darkMode","useDarkMode","useEffect","fetchGenres","fetch","response","json","data","console","error","handleSearch","log","resultsWithImages","results","length","poster_path","title","id","handleGenreClick","genreId","className","type","placeholder","value","onChange","event","target","onClick","map","genre","name","movie","to","src","alt","maxLength","slice","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}